// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`小程序转换生成配置文件 配置文件生成 1`] = `
Map {
  /wxProject/taroConvert/package.json => {
  "name": "taroConvert",
  "version": "1.0.0",
  "private": true,
  "description": "",
  "templateInfo": {
    "name": "default",
    "typescript": false,
    "css": "sass"
  },
  "scripts": {
    "build:weapp": "taro build --type weapp",
    "build:swan": "taro build --type swan",
    "build:alipay": "taro build --type alipay",
    "build:tt": "taro build --type tt",
    "build:h5": "taro build --type h5",
    "build:rn": "taro build --type rn",
    "build:qq": "taro build --type qq",
    "build:jd": "taro build --type jd",
    "build:quickapp": "taro build --type quickapp",
    "build:mpharmony": "taro build --type mpharmony",
    "build:mpandroid": "taro build --type mpandroid",
    "dev:weapp": "npm run build:weapp -- --watch",
    "dev:swan": "npm run build:swan -- --watch",
    "dev:alipay": "npm run build:alipay -- --watch",
    "dev:tt": "npm run build:tt -- --watch",
    "dev:h5": "npm run build:h5 -- --watch",
    "dev:rn": "npm run build:rn -- --watch",
    "dev:qq": "npm run build:qq -- --watch",
    "dev:jd": "npm run build:jd -- --watch",
    "dev:quickapp": "npm run build:quickapp -- --watch",
    "dev:mpharmony": "npm run build:mpharmony -- --watch",
    "dev:mpandroid": "npm run build:mpandroid -- --watch",
    "test": "jest"
  },
  "browserslist": [
    "last 3 versions",
    "Android >= 4.1",
    "ios >= 8"
  ],
  "author": "",
  "dependencies": {
    "@babel/runtime": "^7.21.5",
    "@tarojs/components": "3.6.15",
    "@tarojs/helper": "3.6.15",
    "@tarojs/plugin-platform-weapp": "3.6.15",
    "@tarojs/plugin-platform-alipay": "3.6.15",
    "@tarojs/plugin-platform-tt": "3.6.15",
    "@tarojs/plugin-platform-swan": "3.6.15",
    "@tarojs/plugin-platform-jd": "3.6.15",
    "@tarojs/plugin-platform-qq": "3.6.15",
    "@tarojs/plugin-platform-h5": "3.6.15",
    "@tarojs/plugin-platform-mpharmony": "3.6.15",
    "@tarojs/plugin-platform-mpandroid": "3.6.15",
    "@tarojs/runtime": "3.6.15",
    "@tarojs/shared": "3.6.15",
    "@tarojs/taro": "3.6.15",
    "@tarojs/plugin-framework-react": "3.6.15",
    "@tarojs/react": "3.6.15",
    "react-dom": "^18.0.0",
    "react": "^18.0.0"
  },
  "devDependencies": {
    "@babel/core": "^7.8.0",
    "@tarojs/cli": "3.6.15",
    "@types/webpack-env": "^1.13.6",
    "@tarojs/test-utils-react": "^0.1.1",
    "@types/react": "^18.0.0",
    "webpack": "5.78.0",
    "@tarojs/taro-loader": "3.6.15",
    "@tarojs/webpack5-runner": "3.6.15",
    "babel-preset-taro": "3.6.15",
    "eslint-config-taro": "3.6.15",
    "eslint": "^8.12.0",
    "@pmmmwh/react-refresh-webpack-plugin": "^0.5.5",
    "react-refresh": "^0.11.0",
    "eslint-plugin-react": "^7.8.2",
    "eslint-plugin-import": "^2.12.0",
    "eslint-plugin-react-hooks": "^4.2.0",
    "stylelint": "^14.4.0",
    "postcss": "^8.4.18",
    "ts-node": "^10.9.1",
    "@types/node": "^18.15.11",
    "@types/jest": "^29.3.1",
    "jest": "^29.3.1",
    "jest-environment-jsdom": "^29.5.0"
  }
}
,
}
`;

exports[`日志 生成日志 1`] = `
INFO [taro-cli-convertor] parseAst - 入参 
{"sourceFilePath":"wxProjectapp.js","outputFilePath":"wxProjectapp.js","importStylePath":null,"imports":[]} 
INFO [taro-cli-convertor] parseAst - 解析ImportDeclaration 
import { Block } from "@tarojs/components"; 
INFO [taro-cli-convertor] analyzeImportUrl - 入参 
sourceFilePath: wxProjectapp.js 
value: @tarojs/components 
INFO [taro-cli-convertor] parseAst - 解析ImportDeclaration 
import React from "react"; 
INFO [taro-cli-convertor] analyzeImportUrl - 入参 
sourceFilePath: wxProjectapp.js 
value: react 
INFO [taro-cli-convertor] parseAst - 解析ImportDeclaration 
import Taro from "@tarojs/taro"; 
INFO [taro-cli-convertor] analyzeImportUrl - 入参 
sourceFilePath: wxProjectapp.js 
value: @tarojs/taro 
INFO [taro-cli-convertor] parseAst - 解析CallExpression 
require("@tarojs/with-weapp") 
INFO [taro-cli-convertor] analyzeImportUrl - 入参 
sourceFilePath: wxProjectapp.js 
value: @tarojs/with-weapp 
INFO [taro-cli-convertor] parseAst - 解析CallExpression 
App({}) 
INFO [taro-cli-convertor] parseAst - 解析CallExpression 
cacheOptions.setOptionsToCache({}) 
INFO [taro-cli-convertor] parseAst - 解析MemberExpression 
cacheOptions.setOptionsToCache 
INFO [taro-cli-convertor] parseAst - 解析ClassDeclaration 
@withWeapp(cacheOptions.getOptionsFromCache(), true)
class App extends React.Component {
  render() {
    return this.props.children;
  }
} 
INFO [taro-cli-convertor] parseAst - 解析MemberExpression 
this.props.children 
INFO [taro-cli-convertor] parseAst - 解析MemberExpression 
this.props 
INFO [taro-cli-convertor] parseAst - 解析MemberExpression 
React.Component 
INFO [taro-cli-convertor] parseAst - 解析CallExpression 
withWeapp(cacheOptions.getOptionsFromCache(), true) 
INFO [taro-cli-convertor] parseAst - 解析CallExpression 
cacheOptions.getOptionsFromCache() 
INFO [taro-cli-convertor] parseAst - 解析MemberExpression 
cacheOptions.getOptionsFromCache 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
"@tarojs/with-weapp" 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
"@tarojs/components" 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
"react" 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
"@tarojs/taro" 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
"@tarojs/with-weapp" 
INFO [taro-cli-convertor] convertToOptional - 解析ObjectProperty 
cacheOptions 
INFO [taro-cli-convertor] convertToOptional - 解析CallExpression 
require("@tarojs/with-weapp") 
INFO [taro-cli-convertor] convertToOptional - 解析ObjectProperty 
default: withWeapp 
INFO [taro-cli-convertor] convertToOptional - 解析CallExpression 
require("@tarojs/with-weapp") 
INFO [taro-cli-convertor] convertToOptional - 解析CallExpression 
cacheOptions.setOptionsToCache({}) 
INFO [taro-cli-convertor] convertToOptional - 解析ClassBody 
{
  render() {
    return this.props.children;
  }
} 
INFO [taro-cli-convertor] convertToOptional - 解析MemberExpression 
{
  render() {
    return this.props.children;
  }
} 
INFO [taro-cli-convertor] convertToOptional - 解析MemberExpression 
{
  render() {
    return this.props.children;
  }
} 
INFO [taro-cli-convertor] convertToOptional - 解析CallExpression 
withWeapp(cacheOptions.getOptionsFromCache(), true) 
INFO [taro-cli-convertor] convertToOptional - 解析CallExpression 
cacheOptions.getOptionsFromCache() 
INFO [taro-cli-convertor] parseAst - 解析VariableDeclaration 
const {
  cacheOptions
} = require("@tarojs/with-weapp"); 
INFO [taro-cli-convertor] parseAst - 解析VariableDeclaration 
const {
  default: withWeapp
} = require("@tarojs/with-weapp"); 
INFO [taro-cli-convertor] traversePages - 开始转换页面 
pages/index/index 
INFO [taro-cli-convertor] parseAst - 入参 
{"sourceFilePath":"wxProjectpagesindexindex.js","outputFilePath":"wxProjectpagesindexindex.js","importStylePath":null,"depComponents":{},"imports":[],"pluginComponents":{}} 
INFO [taro-cli-convertor] parseAst - 解析ImportDeclaration 
import { Block, View, Text } from "@tarojs/components"; 
INFO [taro-cli-convertor] analyzeImportUrl - 入参 
sourceFilePath: wxProjectpagesindexindex.js 
value: @tarojs/components 
INFO [taro-cli-convertor] parseAst - 解析ImportDeclaration 
import React from "react"; 
INFO [taro-cli-convertor] analyzeImportUrl - 入参 
sourceFilePath: wxProjectpagesindexindex.js 
value: react 
INFO [taro-cli-convertor] parseAst - 解析ImportDeclaration 
import Taro from "@tarojs/taro"; 
INFO [taro-cli-convertor] analyzeImportUrl - 入参 
sourceFilePath: wxProjectpagesindexindex.js 
value: @tarojs/taro 
INFO [taro-cli-convertor] parseAst - 解析CallExpression 
require("@tarojs/with-weapp") 
INFO [taro-cli-convertor] analyzeImportUrl - 入参 
sourceFilePath: wxProjectpagesindexindex.js 
value: @tarojs/with-weapp 
INFO [taro-cli-convertor] parseAst - 解析CallExpression 
Taro.getApp() 
INFO [taro-cli-convertor] parseAst - 解析MemberExpression 
Taro.getApp 
INFO [taro-cli-convertor] parseAst - 解析CallExpression 
Page({
  data: {
    motto: 'Hello World'
  },
  onLoad() {}
}) 
INFO [taro-cli-convertor] parseAst - 解析CallExpression 
cacheOptions.setOptionsToCache({
  data: {
    motto: 'Hello World'
  },
  onLoad() {}
}) 
INFO [taro-cli-convertor] parseAst - 解析MemberExpression 
cacheOptions.setOptionsToCache 
INFO [taro-cli-convertor] parseAst - 解析ClassDeclaration 
@withWeapp(cacheOptions.getOptionsFromCache())
class _C extends React.Component {
  render() {
    const {
      motto
    } = this.data;
    return <View><Text>{motto}</Text></View>;
  }
} 
INFO [taro-cli-convertor] parseAst - 解析MemberExpression 
this.data 
INFO [taro-cli-convertor] parseAst - 解析JSXElement 
<View><Text>{motto}</Text></View> 
INFO [taro-cli-convertor] parseAst - 解析JSXElement 
<Text>{motto}</Text> 
INFO [taro-cli-convertor] parseAst - 解析MemberExpression 
React.Component 
INFO [taro-cli-convertor] parseAst - 解析CallExpression 
withWeapp(cacheOptions.getOptionsFromCache()) 
INFO [taro-cli-convertor] parseAst - 解析CallExpression 
cacheOptions.getOptionsFromCache() 
INFO [taro-cli-convertor] parseAst - 解析MemberExpression 
cacheOptions.getOptionsFromCache 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
"@tarojs/with-weapp" 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
"@tarojs/components" 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
"react" 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
"@tarojs/taro" 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
"@tarojs/with-weapp" 
INFO [taro-cli-convertor] parseAst - 解析StringLiteral 
'Hello World' 
INFO [taro-cli-convertor] convertToOptional - 解析ObjectProperty 
cacheOptions 
INFO [taro-cli-convertor] convertToOptional - 解析CallExpression 
require("@tarojs/with-weapp") 
INFO [taro-cli-convertor] convertToOptional - 解析ObjectProperty 
default: withWeapp 
INFO [taro-cli-convertor] convertToOptional - 解析CallExpression 
require("@tarojs/with-weapp") 
INFO [taro-cli-convertor] convertToOptional - 解析CallExpression 
Taro.getApp() 
INFO [taro-cli-convertor] convertToOptional - 解析CallExpression 
cacheOptions.setOptionsToCache({
  data: {
    motto: 'Hello World'
  },
  onLoad() {}
}) 
INFO [taro-cli-convertor] convertToOptional - 解析ObjectProperty 
data: {
  motto: 'Hello World'
} 
INFO [taro-cli-convertor] convertToOptional - 解析ObjectProperty 
motto: 'Hello World' 
INFO [taro-cli-convertor] convertToOptional - 解析ClassBody 
{
  render() {
    const {
      motto
    } = this.data;
    return <View><Text>{motto}</Text></View>;
  }
} 
INFO [taro-cli-convertor] convertToOptional - 解析MemberExpression 
{
  render() {
    const {
      motto
    } = this.data;
    return <View><Text>{motto}</Text></View>;
  }
} 
INFO [taro-cli-convertor] convertToOptional - 解析ObjectProperty 
motto 
INFO [taro-cli-convertor] convertToOptional - 解析CallExpression 
withWeapp(cacheOptions.getOptionsFromCache()) 
INFO [taro-cli-convertor] convertToOptional - 解析CallExpression 
cacheOptions.getOptionsFromCache() 
INFO [taro-cli-convertor] parseAst - 解析VariableDeclaration 
const {
  cacheOptions
} = require("@tarojs/with-weapp"); 
INFO [taro-cli-convertor] parseAst - 解析VariableDeclaration 
const {
  default: withWeapp
} = require("@tarojs/with-weapp"); 
INFO [taro-cli-convertor] parseAst - 解析VariableDeclaration 
const app = Taro.getApp(); 
INFO [taro-cli-convertor] parseAst - 解析VariableDeclaration 
const {
  motto
} = this.data; 

`;
